/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Book;
import org.xtext.example.mydsl.myDsl.Library;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Reservation;
import org.xtext.example.mydsl.myDsl.User;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BOOK:
				sequence_Book(context, (Book) semanticObject); 
				return; 
			case MyDslPackage.LIBRARY:
				sequence_Library(context, (Library) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.RESERVATION:
				sequence_Reservation(context, (Reservation) semanticObject); 
				return; 
			case MyDslPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Book returns Book
	 *
	 * Constraint:
	 *     (title=STRING author=STRING isbn=STRING borrower=[User|ID]?)
	 * </pre>
	 */
	protected void sequence_Book(ISerializationContext context, Book semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Library returns Library
	 *
	 * Constraint:
	 *     (name=ID users+=User* books+=Book* reservations+=Reservation*)
	 * </pre>
	 */
	protected void sequence_Library(ISerializationContext context, Library semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     libraries+=Library+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reservation returns Reservation
	 *
	 * Constraint:
	 *     (user=[User|ID] book=[Book|ID] from=DATE to=DATE)
	 * </pre>
	 */
	protected void sequence_Reservation(ISerializationContext context, Reservation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESERVATION__USER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESERVATION__USER));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESERVATION__BOOK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESERVATION__BOOK));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESERVATION__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESERVATION__FROM));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RESERVATION__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RESERVATION__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReservationAccess().getUserUserIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MyDslPackage.Literals.RESERVATION__USER, false));
		feeder.accept(grammarAccess.getReservationAccess().getBookBookIDTerminalRuleCall_4_0_1(), semanticObject.eGet(MyDslPackage.Literals.RESERVATION__BOOK, false));
		feeder.accept(grammarAccess.getReservationAccess().getFromDATETerminalRuleCall_6_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getReservationAccess().getToDATETerminalRuleCall_8_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     User returns User
	 *
	 * Constraint:
	 *     (name=ID email=STRING (ownedBooks+=[Book|ID] ownedBooks+=[Book|ID]*)? currentReservation=[Reservation|ID]?)
	 * </pre>
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
